const Manager = require("./lib/Manager");
const Engineer = require("./lib/Engineer");
const Intern = require("./lib/Intern");
const inquirer = require("inquirer");
const path = require("path");
const fs = require("fs");
const argc = process.argv.length;
const argv = process.argv;
let outputFilename = "team.html";
let employeeArray = [];
var nextEmployeeID = 100;

const OUTPUT_DIR = path.resolve(__dirname, "output");
const outputPath = path.join(OUTPUT_DIR, "team.html");

const render = require("./lib/htmlRenderer");
const Employee = require("./lib/Employee");

/* const employee1 = new Employee ();
const employee2 = new Employee ();
const employee3 = new Employee ();
const engineer1 = new Engineer ();
const engineer2 = new Engineer ();
const engineer3 = new Engineer ();

console.log (employee1.id);
console.log (employee2.id);
console.log (employee3.id);
console.log (engineer1.id);
console.log (engineer2.id);
console.log (engineer3.id);
*/

// If more than two arguments, show the usage information.  Ignore indenting.                        
if (argc > 3) {
    console.log (`Usage:  
    node app.js [output_filename]
    app generate a HTML file of your organization.  You'll be prompted to enter one manager and then one or
    more interns or engineers to include in the organization.  Once completed, the program will create a
    team.html file to represent your organization.  But, you can specify an alternate  
    filename as an optional parameter.  
    
    output_filename - (optional) - write out to your specified file instead of team.html  
    `);
    // Resume normal indenting
  
    // Since we had too many arguments, let's just exit with a return
    return;
}

// Test if user entered one argument.  If so, we will assume that is the filename they want to 
// which they want to write the generated readme.
else if (argc === 3) {
    outputFilname = argv [2];
}

showIntroduction ();
addManager ();  

console.log (employeeArray);
  


function showIntroduction () {
    // Show introduction to user.  Ignore indenting
    console.log (`Welcome to app.js - the Organization Builder!
    You will be prompted to information on a manager.  Afterwards, you can input one or more employees - either
    interns or engineers.  Once you have entered all employees, it will generate an HTML file ${outputFilename}
    with your organization.`);
}

function addManager () {
    addEmployee ("Manager");

}

async function addEmployee (employeeType) {
    try {
        const name = getSpecificInput ("Name");
        const email = getSpecificInput ("Email");

        switch (employeeType) {
            case "Manager":
                const office = getSpecificInput ("Office");
                const managerObject = new Manager (name, email, nextEmployeeID++, office);
                employeeArray.push (managerObject);
                break;

            case "Intern":
                const school = getSpecificInput ("School");
                const internObject = new Intern (name, email, nextEmployeeID++, school);
                employeeArray.push (internObject);
                break;
        
            case "Engineer":
                const github = getSpecificInput ("GitHub");
                const engineerObject = new Engineer (name, email, nextEmployeeID++, github);
                employeeArray.push (engineerObject);
                break;
        }
    }

    catch (error) {
        console.log (error);
    }
}

async function getSpecificInput (inputType) {
    var question;

    switch (inputType) {
        case "Name":
            question = "Employee's Name?";
            break;

        case "Email":
            question = "Employee's Email address?";
            break;
                    
        case "Office":
            question = "Office Number?";
            break;

        case "GitHub":
            question = "GitHub Username?";
            break;
                            
        case "School":
            question = "School Intern Graduated From?";
            break;
                            
    }

/*    inquirer
        .prompt([
        {
            type: "input",
            message: question,
            name: "answer"
        }])
        .then(function(response) {
            return response.answer;
        });
*/

    try {
        const { answer } = await inquirer.prompt ({
            type: "input",
            message: question,
            name: "answer"
        });
    } 

    catch (error) {
        console.log (error);
    }

    return answer;
}

// Write code to use inquirer to gather information about the development team members,
// and to create objects for each team member (using the correct classes as blueprints!)

// After the user has input all employees desired, call the `render` function (required
// above) and pass in an array containing all employee objects; the `render` function will
// generate and return a block of HTML including templated divs for each employee!

// After you have your html, you're now ready to create an HTML file using the HTML
// returned from the `render` function. Now write it to a file named `team.html` in the
// `output` folder. You can use the variable `outputPath` above target this location.
// Hint: you may need to check if the `output` folder exists and create it if it
// does not.

// HINT: each employee type (manager, engineer, or intern) has slightly different
// information; write your code to ask different questions via inquirer depending on
// employee type.

// HINT: make sure to build out your classes first! Remember that your Manager, Engineer,
// and Intern classes should all extend from a class named Employee; see the directions
// for further information. Be sure to test out each class and verify it generates an
// object with the correct structure and methods. This structure will be crucial in order
// for the provided `render` function to work! ```
